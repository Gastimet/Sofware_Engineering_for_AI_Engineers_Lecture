pipeline {
    agent any

    environment {
        PROJECT_DIR        = 'Autogluon_multiple_regression_models'
        DOCKER_IMAGE_NAME  = 'autogluon-ml-app'
        DOCKER_IMAGE_TAG   = 'latest'

        // MLflow tracking server bilgileri
        MLFLOW_PORT        = '5000'
        MLFLOW_CONTAINER   = 'mlflow-server'
        MLFLOW_BACKEND_URI = 'sqlite:///mlflow.db'
        MLFLOW_ARTIFACT_URI = 'file:///mlruns'
    }

    stages {

        stage('Checkout Code') {
            steps {
                echo 'üì¶ Checking out code from Git...'
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                dir(env.PROJECT_DIR) {
                    script {
                        echo 'üê≥ Building Docker image...'
                        sh "docker build -t ${env.DOCKER_IMAGE_NAME}:${env.DOCKER_IMAGE_TAG} ."
                    }
                }
            }
        }

        stage('Start MLflow Tracking Server') {
            steps {
                script {
                    echo 'üöÄ Starting MLflow tracking server...'

                    // √ñnce varsa eski MLflow container‚Äôƒ± durdur
                    sh "docker rm -f ${env.MLFLOW_CONTAINER} || true"

                    // MLflow UI + backend ba≈ülat
                    sh """
                    docker run -d --name ${env.MLFLOW_CONTAINER} \
                        -p ${env.MLFLOW_PORT}:5000 \
                        -v \$(pwd)/mlruns:/mlruns \
                        -v \$(pwd)/mlflow.db:/mlflow.db \
                        python:3.9-slim \
                        sh -c "pip install mlflow && mlflow server \
                        --backend-store-uri ${env.MLFLOW_BACKEND_URI} \
                        --default-artifact-root ${env.MLFLOW_ARTIFACT_URI} \
                        --host 0.0.0.0 --port 5000"
                    """

                    echo "MLflow server is running at: http://localhost:${env.MLFLOW_PORT}"
                }
            }
        }

        stage('Train Model (Logs to MLflow)') {
            steps {
                dir(env.PROJECT_DIR) {
                    script {
                        echo 'üß† Training model and logging to MLflow...'

                        sh """
                        docker run --rm \
                            -v \$(pwd):/app \
                            -e MLFLOW_TRACKING_URI=http://host.docker.internal:${env.MLFLOW_PORT} \
                            ${env.DOCKER_IMAGE_NAME}:${env.DOCKER_IMAGE_TAG} \
                            python -m src.pipeline.train \
                                --task churn \
                                --data-csv-a example_data/source_a.csv \
                                --data-csv-b example_data/source_b.csv \
                                --target churned \
                                --join-keys customer_id \
                                --promote
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'üßπ Cleaning up workspace...'
            sh "docker stop ${env.MLFLOW_CONTAINER} || true"
            cleanWs()
            echo '‚úÖ Pipeline finished.'
        }
    }
}
