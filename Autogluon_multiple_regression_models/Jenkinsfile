pipeline {
    agent any

    tools {
        dockerTool 'docker-from-host'
    }

    environment {
        // Bu ismin reponuzdaki klasör adıyla aynı olduğundan emin olun.
        PROJECT_DIR = 'Autogluon_multiple_regression_models'
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo '📦 Kod, Git reposundan çekiliyor...'
                checkout scm
            }
        }

        stage('Start Services & Run Training') {
            steps {
                dir(env.PROJECT_DIR) {
                    script {
                        echo "🚀 MLflow servisi docker-compose ile başlatılıyor..."
                        // --- DÜZELTME 1: Tire yerine boşluk kullanıldı ---
                        sh "docker compose up --build -d mlflow"

                        echo "⌛ MLflow servisinin sağlıklı olması bekleniyor..."
                        // Bu bekleme komutu, MLflow'un başlaması için zaman tanır.
                        sh """
                        sleep 15
                        docker inspect --format='{{.State.Health.Status}}' mlflow | grep -q 'healthy' || (
                            echo '⚠️ MLflow henüz sağlıklı değil, 20 saniye daha bekleniyor...' &&
                            sleep 20 &&
                            docker inspect --format='{{.State.Health.Status}}' mlflow | grep -q 'healthy'
                        )
                        """

                        echo "🏗️ Docker imajı oluşturuluyor..."
                        def trainingImage = docker.build(".", "--network ${env.PROJECT_DIR}_default")

                        echo "🤖 Model eğitimi başlatılıyor..."
                        trainingImage.inside {
                            sh '''
                            python -m src.pipeline.train \
                                --task churn \
                                --data-csv-a example_data/source_a.csv \
                                --data-csv-b example_data/source_b.csv \
                                --target churned \
                                --join-keys customer_id \
                                --promote
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            dir(env.PROJECT_DIR) {
                script {
                    echo "🧹 Tüm servisler docker-compose ile kapatılıyor..."
                    // --- DÜZELTME 2: Tire yerine boşluk kullanıldı ---
                    sh "docker compose down"
                }
            }
            echo '✅ Pipeline tamamlandı.'
            cleanWs()
        }
    }
}